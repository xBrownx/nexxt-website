import { cva, VariantProps } from 'class-variance-authority';import React, { PropsWithChildren } from 'react';import { ParallaxFadeIn } from '@/components/ui/parallax';import { cn } from '@/utils/cn';const sectionVariants = cva(    [        'flex',        'w-screen',        'md:h-screen',        'items-center',        'justify-center',        //'md:py-16',        'pt-16',        'h-fit',    ],    {        variants: {            background: {                default: 'bg-background-primary',                primary: 'bg-background-primary',                secondary: 'bg-background-secondary',            },        },        defaultVariants: {            background: 'default',        },    },);const splitVariants = cva(    [        'box-border',        'flex',        // 'md:h-[50.875rem]',        'md:h-screen',        // 'md:w-[70rem]',        'md:w-full',        'md:gap-32',        'md:flex-row',        'flex-col',        'gap-8',        'md:px-16',        'py-8',        'h-fit',    ],    {        variants: {            order: {                hero: '',            },        },        defaultVariants: {            order: 'hero',        },    },);type SplitScreenProps = VariantProps<typeof sectionVariants> &    PropsWithChildren &    VariantProps<typeof splitVariants> & {        pageRef: React.LegacyRef<HTMLElement>;    };export function SplitScreen({    background,    order,    pageRef,    children,}: SplitScreenProps) {    return (        <section className={cn(sectionVariants({ background }))} ref={pageRef}>            <ParallaxFadeIn>                <div className={cn(splitVariants({ order }))}>{children}</div>            </ParallaxFadeIn>        </section>    );}type ContentProps = PropsWithChildren & {    mobileOrder: string;};SplitScreen.LeftContent = function LeftContent({    mobileOrder,    children,}: ContentProps) {    return (        <div            id={'split-screen-left'}            className={cn(                `flex size-full flex-1 items-end justify-end rounded-lg md:order-1`,                mobileOrder,            )}        >            {children}        </div>    );};SplitScreen.RightContent = function RightContent({    mobileOrder,    children,}: ContentProps) {    return (        <div            id={'split-screen-left'}            className={cn(`size-full flex-1 md:order-2`, mobileOrder)}        >            {children}        </div>    );};SplitScreen.displayName = 'SplitScreen';