import * as React from 'react';import { levelConfig, LevelConfigKey } from '@/config';type AvailabilityContextProviderProps = {    children: React.ReactNode;};type AvailabilityContextProps = {    isModalOpen: boolean;    closeModal: () => void;    activeLevel: string | null | undefined;    onLevelClick: (id: string) => void;    onLevelHover: (id: string | null) => void;    activeHover: string | null | undefined;    navigateUp: () => void;    navigateDown: () => void;    activeLevelArray: { lvl: number; isActive: boolean; key: string }[];};const AvailabilityContext =    React.createContext<AvailabilityContextProps | null>(null);export const useAvailabilityContext = () => {    const availabilityContext = React.useContext(AvailabilityContext);    if (!availabilityContext) {        throw new Error(            'availabilityContext has to be used within <AvailabilityContext.Provider>',        );    }    return availabilityContext;};export const AvailabilityContextProvider: React.FC<    AvailabilityContextProviderProps> = ({ children }) => {    const getActiveLevels = () => {        return Object.keys(levelConfig)            .map((key) => {                return { key: key, ...levelConfig[key as LevelConfigKey] };            })            .filter((item) => item.isActive)            .reverse();    };    const activeLevelArray = getActiveLevels();    const [isModalOpen, setModalOpen] = React.useState(false);    const [activeLevel, setActiveLevel] = React.useState<string | null>(null);    const [activeHover, setActiveHover] = React.useState<        string | null | undefined    >(null);    const onLevelClick = (lvlId: string) => {        setModalOpen(true);        setActiveLevel(lvlId);        console.log(`level: ${lvlId}, isModalOpen: ${isModalOpen}`);    };    const onLevelHover = (lvlId: string | null) => {        setActiveHover(lvlId);    };    const closeModal = () => {        setModalOpen(false);    };    const getActiveIdx = () => {        return activeLevelArray.findIndex((item) => item.key === activeLevel);    };    const navigateUp = () => {        const activeIdx = getActiveIdx();        if (activeIdx !== 0) {            setActiveLevel(activeLevelArray[activeIdx - 1].key);        }    };    const navigateDown = () => {        const activeIdx = getActiveIdx();        if (activeIdx !== activeLevelArray.length - 1) {            setActiveLevel(activeLevelArray[activeIdx + 1].key);        }    };    React.useEffect(() => {        // if (typeof window != 'undefined' && window.document && isModalOpen) {        //     document.body.style.overflowY = 'hidden';        // } else {        //     document.body.style.overflowY = 'auto';        // }    }, [isModalOpen]);    return (        <AvailabilityContext.Provider            value={{                isModalOpen,                closeModal,                activeLevel,                onLevelClick,                activeHover,                onLevelHover,                navigateUp,                navigateDown,                activeLevelArray,            }}        >            {children}        </AvailabilityContext.Provider>    );};