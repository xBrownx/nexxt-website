import { CSSProperties, useEffect, useRef } from 'react';import { useCreateCloud } from '@/features/cloud-3d/create-cloud';import { CloudProps } from '@/features/cloud-3d/types';const getIsInitialized = (id: string) => {    const key = '__tag-cloud-' + id;    if (key in window) {        return Boolean((window as any)[key]);    }    return ((window as any)[key] = false);};const setIsInitialized = (id: string, value: boolean) => {    const key = '__tag-cloud-' + id;    (window as any)[key] = value;};export const Cloud3d = <T extends HTMLDivElement>(props: CloudProps<T>) => {    const ref = useRef<HTMLDivElement>(null);    const key = [        props.id,        props.className,        // JSON.stringify(props.children),    ].join('-');    const options = props.options        ? typeof props.options == 'function'            ? props.options(window)            : props.options        : {};    const cloud = useCreateCloud(ref.current as any, props.children, options);    useEffect(() => {        console.log('cloud-3d useEffect');        if (getIsInitialized(key) || !ref.current) {            return;        }        if (props.children.length === 0) {            console.error('TagCloud: No children provided.');            return;        }        cloud._init();        setIsInitialized(key, true);        if (props.onClick) {            const elements = Array.from(                ref.current.getElementsByClassName(                    options.itemClass ?? 'cloud--item',                ),            ) as Array<HTMLElement>;            if (props.onClick) {                for (const el of elements) {                    el.addEventListener(                        'click',                        (event) => {                            if (props.onClick) props.onClick(el as T, event);                        },                        props.onClickOptions,                    );                }            }        }        // return () => {        //     try {        //         tagCloud?.destroy();        //     } finally {        //         setIsInitialized(key, false);        //     }        // };    }, [ref, key, props]);    return (        <div            ref={ref}            id={props.id}            className={'size-full'}            style={props.style}        />    );};