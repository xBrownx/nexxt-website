import * as React from 'react';type InfiniteScrollProps = {    children: React.ReactNode;};export const InfiniteScroll: React.FC<InfiniteScrollProps> = ({ children }) => {    const [looperInstances, setLooperInstances] = React.useState(2);    const outerRef: React.MutableRefObject<HTMLDivElement | null> =        React.useRef(null);    const innerRef: React.MutableRefObject<HTMLDivElement | null> =        React.useRef(null);    function resetAnimation() {        if (innerRef?.current) {            innerRef.current.setAttribute('data-animate', 'false');            setTimeout(() => {                if (innerRef?.current) {                    innerRef.current.setAttribute('data-animate', 'true');                }            }, 50);        }    }    //    // const setupInstances = React.useCallback(() => {    //     if (!innerRef?.current || !outerRef?.current) return;    //     const { width } = innerRef.current.getBoundingClientRect();    //     const { width: parentWidth } = outerRef.current.getBoundingClientRect();    //     const instanceWidth = width / innerRef.current.children.length;    //     if (width < parentWidth + instanceWidth) {    //         setLooperInstances(    //             looperInstances + Math.ceil(parentWidth / width) - 1,    //         );    //     }    //     resetAnimation();    // }, []);    //    // React.useEffect(() => {    //     setupInstances();    // }, []);    //    // React.useEffect(() => {    //     window.addEventListener('resize', setupInstances);    //    //     return () => {    //         window.removeEventListener('resize', setupInstances);    //     };    // }, [setupInstances]);    React.useEffect(() => {        resetAnimation();    }, []);    return (        <div            id={`outer-ref instance=${looperInstances}`}            ref={outerRef}            className={`w-full max-w-[unset] overflow-hidden`}        >            <div                id={'inner-ref'}                className={`box-border flex w-max max-w-[unset] animate-none justify-center overflow-x-hidden [&[data-animate=true]]:animate-infinite-scroll`}                ref={innerRef}            >                {[...Array(looperInstances)].map((_, ind) => (                    <div id={'inner-div'} key={ind}>                        {children}                    </div>                ))}            </div>        </div>    );};