import React from 'react';type PageRefs = {    landing: React.MutableRefObject<any>;    home: React.MutableRefObject<any>;    design: React.MutableRefObject<any>;    amenities: React.MutableRefObject<any>;    location: React.MutableRefObject<any>;    availability: React.MutableRefObject<any>;    history: React.MutableRefObject<any>;    agency: React.MutableRefObject<any>;    enquire: React.MutableRefObject<any>;};type NavigationContextProps = {    pageRefs: PageRefs;    navigateToPage: (page: string) => void;};type NavigationContextProviderProps = {    children: React.ReactNode;};const NavigationContext = React.createContext<NavigationContextProps | null>(    null,);export const useNavigationContext = () => {    const navigationContext = React.useContext(NavigationContext);    if (!navigationContext) {        throw new Error(            'navigationContext has to be used within <NavigationContext.Provider>',        );    }    return navigationContext;};export const NavigationContextProvider: React.FC<    NavigationContextProviderProps> = ({ children }) => {    const pageRefs: PageRefs = {        landing: React.useRef(),        home: React.useRef(),        design: React.useRef(),        amenities: React.useRef(),        location: React.useRef(),        availability: React.useRef(),        history: React.useRef(),        agency: React.useRef(),        enquire: React.useRef(),    };    const navigateToPage = (page: string) => {        pageRefs[page as keyof typeof pageRefs].current.scrollIntoView({            behavior: 'smooth',        });    };    return (        <NavigationContext.Provider            value={{                pageRefs,                navigateToPage,            }}        >            {children}        </NavigationContext.Provider>    );};