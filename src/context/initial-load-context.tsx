import * as React from 'react';type InitialLoadContextProviderProps = {    children: React.ReactNode;};type InitialLoadContextProps = {    isLoadComplete: boolean;    setTransitionComplete: (transitionComplete: boolean) => void;    progress: number;    progressPercent: number;    transitionComplete: boolean;};const InitialLoadContext = React.createContext<InitialLoadContextProps | null>(    null,);export const useInitialLoadContext = () => {    const initialLoadContext = React.useContext(InitialLoadContext);    if (!initialLoadContext) {        throw new Error(            'initialLoadContext has to be used within <InitialLoadContext.Provider>',        );    }    return initialLoadContext;};export const InitialLoadContextProvider: React.FC<    InitialLoadContextProviderProps> = ({ children }) => {    const [isLoadComplete, setLoadComplete] = React.useState(false);    const [progress, setProgress] = React.useState(0);    const [transitionComplete, setTransitionComplete] = React.useState(false);    const [progressPercent, setProgressPercent] = React.useState<number>(0);    React.useEffect(() => {        let x = 0;        setTimeout(() => {            const interval = setInterval(() => {                setProgressPercent((prevState) => {                    x = prevState + 1;                    if (x >= 7) {                        x = 7;                        clearInterval(interval);                        return x;                    }                    return x > 7 ? 7 : x;                });            }, 50);            setProgress(7);        }, 500);        setTimeout(() => {            const interval = setInterval(() => {                setProgressPercent((prevState) => {                    x = prevState + 1;                    if (x >= 32) {                        x = 32;                        clearInterval(interval);                        return x;                    }                    return x > 32 ? 32 : x;                });            }, 25);            setProgress(32);        }, 1500);        setTimeout(() => {            const interval = setInterval(() => {                setProgressPercent((prevState) => {                    x = prevState + 1;                    if (x >= 58) {                        x = 58;                        clearInterval(interval);                        return x;                    }                    return x > 58 ? 58 : x;                });            }, 25);            setProgress(58);        }, 2500);        setTimeout(() => {            const interval = setInterval(() => {                setProgressPercent((prevState) => {                    x = prevState + 1;                    if (x >= 96) {                        x = 96;                        clearInterval(interval);                        return x;                    }                    return x > 96 ? 96 : x;                });            }, 25);            setProgress(96);        }, 3500);        setTimeout(() => {            const interval = setInterval(() => {                setProgressPercent((prevState) => {                    x = prevState + 1;                    if (x >= 100) {                        x = 100;                        clearInterval(interval);                        setTimeout(() => setLoadComplete(true), 1000);                        return x;                    }                    return x > 100 ? 100 : x;                });            }, 25);            setProgress(100);        }, 4500);    }, []);    React.useEffect(() => {        // let x = 0;        // const interval = setInterval(() => {        //     setProgress((prevState) => {        //         x = prevState + 25;        //         if (x >= 100) {        //             x = 100;        //             setTimeout(() => setLoadComplete(true), 1000);        //             clearInterval(interval);        //             return x;        //         }        //         return x > 100 ? 100 : x;        //     });        // }, 800);        // return () => clearInterval(interval);    }, []);    React.useEffect(() => {        if (isLoadComplete) {            setTimeout(() => setTransitionComplete(true), 3000);        }    }, [isLoadComplete]);    return (        <InitialLoadContext.Provider            value={{                isLoadComplete,                setTransitionComplete,                progress,                progressPercent,                transitionComplete,            }}        >            {children}        </InitialLoadContext.Provider>    );};