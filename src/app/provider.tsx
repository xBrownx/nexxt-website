import { QueryClient, QueryClientProvider } from '@tanstack/react-query';import { ReactQueryDevtools } from '@tanstack/react-query-devtools';import * as React from 'react';import { PropsWithChildren } from 'react';import { ErrorBoundary } from 'react-error-boundary';import { HelmetProvider } from 'react-helmet-async';import { MainErrorFallback } from '@/components/errors/main';import { Spinner } from '@/components/ui/spinner';import { NavigationContextProvider } from '@/context/navigation-context';import { Header } from '@/features/header';import { queryConfig } from '@/lib/react-query';type AppProviderProps = {    children: React.ReactNode;};export const AppProvider = ({ children }: AppProviderProps) => {    const [queryClient] = React.useState(        () =>            new QueryClient({                defaultOptions: queryConfig,            }),    );    return (        <React.Suspense            fallback={                <div className="flex h-screen w-screen items-center justify-center">                    <Spinner size="xl" />                </div>            }        >            <ErrorBoundary FallbackComponent={MainErrorFallback}>                <HelmetProvider>                    <QueryClientProvider client={queryClient}>                        <NavigationContextProvider>                            {children}                        </NavigationContextProvider>                    </QueryClientProvider>                </HelmetProvider>            </ErrorBoundary>        </React.Suspense>    );};